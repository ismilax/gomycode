# -*- coding: utf-8 -*-
"""Streamlit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m3jJb9fv7TmpLxZyOXvNsthAe6cqsTdY
"""

import pandas as pd
import numpy as np

df = pd.read_csv('/content/drive/MyDrive/Expresso_churn_dataset.csv')
df.head()

df = df.drop(['user_id'], axis=1)

df.head()

df = df.drop_duplicates()

df.info()

df.describe()

df.isnull().sum()

from ydata_profiling import ProfileReport
profile = ProfileReport(df, title="Pandas Profiling Report")
profile.to_notebook_iframe()

num_cols = [
    "MONTANT", "FREQUENCE_RECH", "REVENUE", "ARPU_SEGMENT",
    "FREQUENCE", "DATA_VOLUME", "ON_NET", "ORANGE", "TIGO",
    "ZONE1", "ZONE2", "REGULARITY", "FREQ_TOP_PACK"
]

for col in num_cols:
    df[col].fillna(df[col].median(), inplace=True)

cat_cols = ["REGION", "TENURE", "MRG", "TOP_PACK"]

for col in cat_cols:
    df[col].fillna(df[col].mode()[0], inplace=True)

df.isnull().sum()

for col in num_cols:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR

    # Keep rows within IQR range
    df = df[(df[col] >= lower) & (df[col] <= upper)]

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(15, 10))
for i, col in enumerate(num_cols):
    plt.subplot(4, 4, i + 1)
    sns.boxplot(y=df[col])
    plt.title(col)
plt.tight_layout()
plt.show()

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
for col in cat_cols:
    df[col] = le.fit_transform(df[col])

df.head()

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import joblib

# Split the dataset
X = df.drop("CHURN", axis=1)
y = df["CHURN"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a smaller model
model = RandomForestClassifier(
    n_estimators=50,         # fewer trees
    max_depth=10,            # limit depth
    min_samples_split=5,     # avoid overfitting
    random_state=42
)

model.fit(X_train, y_train)

model.score(X_test, y_test)

import joblib

# Save compressed model
joblib.dump(model, "churn_model.pkl", compress=3)